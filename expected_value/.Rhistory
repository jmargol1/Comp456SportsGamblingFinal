group_by(id) %>%
filter(max(home_prob_vig) - min(home_prob_vig) < .05,
max(away_prob_vig) - min(away_prob_vig) < .05),
2022)
training_ncaaf = fit_top_n_books_model(1, FALSE, FALSE)$`Average of Top 1 Books`
average_ncaaf = fit_top_n_books_model("all", FALSE, FALSE)$`Average of Top 13 Books`$.pred_TRUE
final_fit_ncaaf = fit_top_n_books_model(1, FALSE, TRUE)$`Average of Top 1 Books`
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
average_ncaaf
training_ncaaf
train_fit = training_ncaaf
average = average_ncaaf
league = "NCAAF"
mod_name = "Top Book"
train_fit$average_win_prob = average
model_prob_bin = train_fit %>%
mutate(bin = cut_number(.pred_TRUE, 5))%>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name) %>%
select(c(x, y, model))
train_fit
train_fit %>%
mutate(bin = cut_number(.pred_TRUE, 5))
train_fit %>% view
cut_number(train_fit$.pred_TRUE, 5)
train_fit
train_fit %>%
mutate(bin = cut_number(.pred_TRUE, 5))
train_fit %>%
mutate(bin = cut_number(average_win_prob, 5))
bin_train = cut_number(train_fit$.pred_TRUE, 5)
bin_train
bin_train = cut_number(train_fit$.pred_TRUE, 5)
model_prob_bin = train_fit
model_prob_bin$bin = bin_train
model_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name) %>%
select(c(x, y, model))
bin_average = cut_number(average, 5)
get_model_reliability_data = function(train_fit, average, league, mod_name) {
train_fit$average_win_prob = average
bin_train = cut_number(train_fit$.pred_TRUE, 5)
model_prob_bin = train_fit
model_prob_bin$bin = bin_train
model_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name) %>%
select(c(x, y, model))
bin_average = cut_number(average, 5)
average_prob_bin = train_fit
average_prob_bin$bin = bin_average
average_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(average_win_prob),
y = mean(as.logical(home_team_win)),
model = "Average of All Books") %>%
select(c(x, y, model))
return (rbind(model_prob_bin, average_prob_bin) %>%
mutate(league = league))
}
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
ncaaf_reliability
get_model_reliability_data = function(train_fit, average, league, mod_name) {
train_fit$average_win_prob = average
bin_train = cut_number(train_fit$.pred_TRUE, 5)
model_prob_bin = train_fit
model_prob_bin$bin = bin_train
model_prob_bin = model_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name) %>%
select(c(x, y, model))
bin_average = cut_number(average, 5)
average_prob_bin = train_fit
average_prob_bin$bin = bin_average
average_prob_bin = average_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(average_win_prob),
y = mean(as.logical(home_team_win)),
model = "Average of All Books") %>%
select(c(x, y, model))
return (rbind(model_prob_bin, average_prob_bin) %>%
mutate(league = league))
}
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
ncaaf_reliability
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nfl_reliability
ncaaf_reliability
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nba_reliability = get_model_reliability_data(training_nba, average_nba, "NBA", "Average of Top 4 Books")
ncaab_reliability = get_model_reliability_data(training_ncaab, average_ncaab, "NCAAB", "Average of Top 4 Books")
nhl_reliability = get_model_reliability_data(training_nhl, average_nhl, "NHL", "Top Book")
mlb_reliability = get_model_reliability_data(training_mlb, average_mlb, "MLB", "Weighted Average of Top 4 Books")
rbind(ncaaf_reliability, nfl_reliability, nba_reliability,
ncaab_reliability, nhl_reliability, mlb_reliability)  %>%
mutate(Model = model) %>%
ggplot(aes(x=x, y=y, color=Model)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point() +
geom_line() +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
get_model_reliability_data = function(train_fit, average, league, mod_name) {
train_fit$average_win_prob = average
bin_train = cut_number(train_fit$.pred_TRUE, 5)
model_prob_bin = train_fit
model_prob_bin$bin = bin_train
model_prob_bin = model_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name) %>%
select(c(x, y, model))
return (model_prob_bin)
}
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nba_reliability = get_model_reliability_data(training_nba, average_nba, "NBA", "Average of Top 4 Books")
ncaab_reliability = get_model_reliability_data(training_ncaab, average_ncaab, "NCAAB", "Average of Top 4 Books")
nhl_reliability = get_model_reliability_data(training_nhl, average_nhl, "NHL", "Top Book")
mlb_reliability = get_model_reliability_data(training_mlb, average_mlb, "MLB", "Weighted Average of Top 4 Books")
rbind(ncaaf_reliability, nfl_reliability, nba_reliability,
ncaab_reliability, nhl_reliability, mlb_reliability)  %>%
mutate(Model = model) %>%
ggplot(aes(x=x, y=y)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point(color = "red") +
geom_line(color = "red") +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
ncaaf_reliability
nfl_reliability
nba_reliability
ncaab_reliability
get_model_reliability_data = function(train_fit, average, mod_league, mod_name) {
train_fit$average_win_prob = average
bin_train = cut_number(train_fit$.pred_TRUE, 5)
model_prob_bin = train_fit
model_prob_bin$bin = bin_train
model_prob_bin = model_prob_bin %>%
group_by(bin) %>%
summarise(x = mean(.pred_TRUE),
y = mean(as.logical(home_team_win)),
model = mod_name,
league = mod_league) %>%
select(c(x, y, model, league))
return (model_prob_bin)
}
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
ncaaf_reliability
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nba_reliability = get_model_reliability_data(training_nba, average_nba, "NBA", "Average of Top 4 Books")
ncaab_reliability = get_model_reliability_data(training_ncaab, average_ncaab, "NCAAB", "Average of Top 4 Books")
nhl_reliability = get_model_reliability_data(training_nhl, average_nhl, "NHL", "Top Book")
mlb_reliability = get_model_reliability_data(training_mlb, average_mlb, "MLB", "Weighted Average of Top 4 Books")
rbind(ncaaf_reliability, nfl_reliability, nba_reliability,
ncaab_reliability, nhl_reliability, mlb_reliability)  %>%
mutate(Model = model) %>%
ggplot(aes(x=x, y=y)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point(color = "red") +
geom_line(color = "red") +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
load("graphics/all_sports_reliability_plot")
all_sports_reliability_plot
all_sports_reliability_plot
all_sports_reliability_plot = all_sports_ml %>%
group_by(league) %>%
mutate(bins = cut_number(home_prob_fair, 5)) %>%
ungroup() %>%
group_by(league, bins) %>%
summarise(x = mean(home_prob_fair),
y = mean(home_team_win)) %>%
ggplot(aes(x=x, y=y, color=league)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point() +
geom_line() +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
all_sports_reliability_plot
save(all_sports_reliability_plot, file = "graphics/all_sports_reliability_plot")
load("graphics/all_sports_reliability_plot")
all_sports_reliability_plot
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nba_reliability = get_model_reliability_data(training_nba, average_nba, "NBA", "Average of Top 4 Books")
ncaab_reliability = get_model_reliability_data(training_ncaab, average_ncaab, "NCAAB", "Average of Top 4 Books")
nhl_reliability = get_model_reliability_data(training_nhl, average_nhl, "NHL", "Top Book")
mlb_reliability = get_model_reliability_data(training_mlb, average_mlb, "MLB", "Weighted Average of Top 4 Books")
rbind(ncaaf_reliability, nfl_reliability, nba_reliability,
ncaab_reliability, nhl_reliability, mlb_reliability)  %>%
mutate(Model = model) %>%
ggplot(aes(x=x, y=y, color = league)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point(color = "red") +
geom_line(color = "red") +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
ncaaf_reliability = get_model_reliability_data(training_ncaaf, average_ncaaf, "NCAAF", "Top Book")
nfl_reliability = get_model_reliability_data(training_nfl, average_nfl, "NFL", "Average of Top 4 Books")
nba_reliability = get_model_reliability_data(training_nba, average_nba, "NBA", "Average of Top 4 Books")
ncaab_reliability = get_model_reliability_data(training_ncaab, average_ncaab, "NCAAB", "Average of Top 4 Books")
nhl_reliability = get_model_reliability_data(training_nhl, average_nhl, "NHL", "Top Book")
mlb_reliability = get_model_reliability_data(training_mlb, average_mlb, "MLB", "Weighted Average of Top 4 Books")
rbind(ncaaf_reliability, nfl_reliability, nba_reliability,
ncaab_reliability, nhl_reliability, mlb_reliability)  %>%
mutate(Model = model) %>%
ggplot(aes(x=x, y=y, color = league)) +
geom_abline(slope = 1, color = "black", lty = 2) +
geom_point() +
geom_line() +
facet_wrap(~league) +
theme_bw() +
labs(title = "Predicted Home Win Probability Vs. True Win Probability", x = "Predicted Win Probability", y = "True Home Win Probability")
for(i in leagues) {
p = bankroll_plot(i)
plot(p)
}
calculate_ev(final_fit_ncaaf, ncaaf_ml)
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE))
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob))
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10))
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10)) %>%
group_by(bin) %>%
summarise(mean(ev))
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10)) %>%
group_by(bin) %>%
summarise(mean(ev))
final_fits = list(final_fit_ncaaf, final_fit_nfl, final_fit_ncaab, final_fit_nba, final_fit_mlb, final_fit_nhl)
league_mls = list(ncaaf_ml, nfl_ml, ncaab_ml, nba_ml, mlb_ml, nhl_ml)
leagues = c("NCAAF", "NFL", "NCAAB", "NBA", "MLB", "NHL")
league_bets = NULL
for (i in 1:6) {
bets = as.data.frame(calc_bankroll(final_fits[[i]], league_mls[[i]], 100)) %>%
mutate(league = leagues[i],
day = 1:nrow(.) - 1)
league_bets = rbind(league_bets, bets)
}
for(i in leagues) {
p = bankroll_plot(i)
plot(p)
}
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point()
calculate_ev(final_fit_ncaaf, ncaaf_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
theme_bw()
calculate_ev(final_fit_mlb, mlb_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 10)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
theme_bw()
calculate_ev(final_fit_mlb, mlb_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
theme_bw()
calculate_ev(final_fit_mlb, mlb_ml) %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
theme_bw()
ev_df = NULL
for (i in 1:6) {
ev_df = rbind(ev_df, calculate_ev(final_fits[[i]], league_mls[[i]]) %>% mutate(league = leagues[i]))
}
ev_df
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
theme_bw()
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw()
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE))
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob, league)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw()
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob, league)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin, league) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw()
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob, league)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin, league) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob, league)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin, league) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "abab")
ev_df %>%
mutate(ev = if_else(ev_home > ev_away, ev_home ,ev_away),
win_prob = if_else(ev_home > ev_away, .pred_TRUE, 1 - .pred_TRUE)) %>%
filter(ev > 0) %>%
select(c(ev, win_prob, league)) %>%
mutate(bin = cut_number(win_prob, 5)) %>%
group_by(bin, league) %>%
summarise(ev = mean(ev)) %>%
ggplot(aes(x = bin,y = ev)) +
geom_line() +
geom_point() +
facet_wrap(~league) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Predicted Win Probability", y = "Expected Value", title = "Expected Value Vs. Predicted Win Probability By League")
league_bets
4.18108 + 18.38567 + 4.26511 + (100 - 91.31302) + 79.64089 + 53.36929
168.529 / 600
source("scripts/data_scraper.R")
source("scripts/models.R")
125/225
25 / 125
25/125
25/100
10/220
10 / 210
25 / 225
25 / 225
.5238 * 2
120/220
.5 / 1.045
.5 / 1.045 - 1
10 / 220
10 / 210
105/205
126/226
100 / (205)
126 / 226
115/215
.488 + .588
.488 + .558
.512 / 1.047
.535 / 1.047
.488 + .558
.488 / 1.046
.558 / 1.046
setwd("~/Desktop/School Fall 2022/Data_Science/comp456DeclanJoe/expected_value")
read.csv("betting_data/ncaaf_raw.rdata")
source("~/Desktop/School Fall 2022/Data_Science/comp456DeclanJoe/expected_value/scripts/data_scraper.R")
get_football_df("ncaaf", "all", 2022, 2022) %>% view()
get_football_df("ncaaf", "all", 2022, 2022)
get_football_df("ncaaf", "all", 2021, 2022)
week = 1
season = 2022
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36"
url = paste("https://api.actionnetwork.com/web/v1/scoreboard/", league, "?", sep = "") %>%
param_set("period", "game")
temp_url = param_set(url, "week", week) %>%
param_set("season", season) %>%
param_set("bookIds", paste(books, collapse = ","))
league = "ncaaf"
url = paste("https://api.actionnetwork.com/web/v1/scoreboard/", league, "?", sep = "") %>%
param_set("period", "game")
temp_url = param_set(url, "week", week) %>%
param_set("season", season) %>%
param_set("bookIds", paste(books, collapse = ","))
books = c("15", "30")
temp_url = param_set(url, "week", week) %>%
param_set("season", season) %>%
param_set("bookIds", paste(books, collapse = ","))
resp = GET(temp_url, user_agent(user_agent))
resp_df = jsonlite::fromJSON(content(resp, "text"))$games
View(resp_df)
week = 3
temp_url = param_set(url, "week", week) %>%
param_set("season", season) %>%
param_set("bookIds", paste(books, collapse = ","))
resp = GET(temp_url, user_agent(user_agent))
resp_df = jsonlite::fromJSON(content(resp, "text"))$games
resp_df
View(resp_df)
knitr::opts_chunk$set(echo = TRUE)
head(resp_df)
head(resp_df) %>% view(
)
